/*
Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.

A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.

Example:

Input: "23"
Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].
Note:

Although the above answer is in lexicographical order, your answer could be in any order you want.

*/

unordered_map<char, string> dig2map({
        { '2', "abc" },
        { '3', "def" },
        { '4', "ghi" },
        { '5', "jkl" },
        { '6', "mno" },
        { '7', "pqrs" },
        { '8', "tuv" },
        { '9', "wxyz"}
        });

    vector<string> letterCombinations(string digits) {
        vector<string> rst;
        if(digits.empty()) return rst;
        else return combine(digits);
    }
    
    vector<string> combine(string digits) {
        vector<string> rst;
        if(digits.empty()){
            rst.push_back("");
            return rst;
        }
        
        vector<string> tmp = combine(digits.substr(1));
        for(int i = 0; i < dig2map[digits[0]].length(); i++){
            for(int j = 0; j < tmp.size(); j++){
                rst.push_back(dig2map[digits[0]][i]+tmp[j]);
            }
        }
        return rst;
    }

