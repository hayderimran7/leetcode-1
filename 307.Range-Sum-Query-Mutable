/*
Given an integer array nums, find the sum of the elements between indices i and j (i â‰¤ j), inclusive.

The update(i, val) function modifies nums by updating the element at index i to val.

Example:

Given nums = [1, 3, 5]

sumRange(0, 2) -> 9
update(1, 2)
sumRange(0, 2) -> 8

Note:

    The array is only modifiable by the update function.
    You may assume the number of calls to update and sumRange function is distributed evenly.
*/

class NumArray {
private:
    struct SegmentTreeNode {
        int start, end, sum;
        SegmentTreeNode *left, *right;

        SegmentTreeNode(int s, int e)
        : start(s), end(e), sum(0), left(nullptr), right(nullptr) {
        }
    };
    
    SegmentTreeNode* root;
    
    SegmentTreeNode* buildTree(vector<int> const& nums, int start, int end) {
        if(start>end) return nullptr;
        SegmentTreeNode* root = new SegmentTreeNode(start,end);
        if(start==end) {
            root->sum = nums[start];
            return root;
        }
        int mid = (start+end)/2;
        root->left = buildTree(nums,start,mid);
        root->right = buildTree(nums,mid+1,end);
        root->sum = root->left->sum + root->right->sum;
        return root;
    }

    void modifyTree(int i, int val, SegmentTreeNode* root) {
        if(!root) return;
        if(i == root->start && i == root->end) {
            root->sum = val;
            return;
        }
        int mid = (root->start + root->end) / 2;
        if(i > mid) {
            modifyTree(i,val,root->right);
        } else {
            modifyTree(i,val,root->left);
        }
        root->sum = root->left->sum + root->right->sum;
    }
    
    int queryTree(int i, int j, SegmentTreeNode* root) {
        if(root == nullptr) return 0;
        if(root->start == i && root->end == j) return root->sum;
        int mid = (root->start + root->end) / 2;
        if(i > mid) return queryTree(i,j,root->right);
        if(j <= mid) return queryTree(i,j,root->left);
        return queryTree(i,mid,root->left) + queryTree(mid+1,j,root->right);
    }
public:

    NumArray(vector<int> nums) {
        root = buildTree(nums, 0, nums.size()-1);
    }
    
    void update(int i, int val) {
        modifyTree(i,val,root);
    }
    
    int sumRange(int i, int j) {
        return queryTree(i, j, root);
    }
};

/**
 * Your NumArray object will be instantiated and called as such:
 * NumArray obj = new NumArray(nums);
 * obj.update(i,val);
 * int param_2 = obj.sumRange(i,j);
 */
