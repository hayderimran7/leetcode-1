/*
Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

Example:

Input: [-2,1,-3,4,-1,2,1,-5,4],
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.
Follow up:

If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.

*/

/*
kind of DP question
at each position we will get current max sum is pre max sum + current value or current value, which is bigger
then compare with global max sum
*/

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        if(nums.empty()) return 0;
        
        int maxi = nums[0], maxsum = nums[0];
        for(int i = 1; i < nums.size(); i++){
            maxi = max(maxi+nums[i], nums[i]);
            maxsum = max(maxi, maxsum);
        }
        return maxsum;
    }
};

