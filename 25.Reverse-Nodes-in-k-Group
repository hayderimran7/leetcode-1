/*
Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.

Example:

Given this linked list: 1->2->3->4->5

For k = 2, you should return: 2->1->4->3->5

For k = 3, you should return: 3->2->1->4->5

Note:

Only constant extra memory is allowed.
You may not alter the values in the list's nodes, only nodes itself may be changed.
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */

    ListNode *reverseKGroup(ListNode *head, int k) {
        if(!head || !head->next) return head;
        
        ListNode h1(0);
        ListNode * pre = &h1;
        h1.next = head;
        ListNode * cur = head;
        
        int c = 0;
        while(cur){
            c++;
            if(c%k == 0){
                pre = reverse(pre, cur->next);
                cur = pre->next;
            }
            else {
                cur = cur->next;
            }
        }
        return h1.next;
    }
    
    ListNode* reverse(ListNode* pre, ListNode *post){
        ListNode* cur = pre->next;
        while(cur->next != post){
            ListNode* tmp = cur->next;
            cur->next = tmp->next;
            tmp->next = pre->next;
            pre->next = tmp;
        }
        return cur;
    }
