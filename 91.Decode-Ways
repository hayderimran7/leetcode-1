/*
A message containing letters from A-Z is being encoded to numbers using the following mapping:

'A' -> 1
'B' -> 2
...
'Z' -> 26
Given a non-empty string containing only digits, determine the total number of ways to decode it.

Example 1:

Input: "12"
Output: 2
Explanation: It could be decoded as "AB" (1 2) or "L" (12).
Example 2:

Input: "226"
Output: 3
Explanation: It could be decoded as "BZ" (2 26), "VF" (22 6), or "BBF" (2 2 6).
*/

/*
one dimension DP, c[i] for count at postion of s[i-1]
check current number s[i-1] and preceding s[i-2]
we need start from i=2 for s[i-2] aka s[0] and c[i-1]

   init c[i] = 0, len is len(s)+1
        c[0] = 1 at least one count
        c[1] = 1 if s[0] != 0
   // current position s[i-1]
   if s[i-1] != 0:
       // count is same as preceding number
       c[i] = c[i-1]

   // preceding s[i-1] (c[i-2]) 
   // treat preceding number and current number together, count is c[i-2]
   // seperate preceding number and current number, count is c[i-1]
   if s[i-2] is 1 or (s[i-2] = 2 && s[i-1] is {0-6}:
       c[i] = c[i-1] + c[i-2]

examples:

    1 2
c 1 1        c[0] = 1  c[1] = 1,  {1}
c 1 1 2      c[2] = c[0] + c[1],  {1,2; 12}

    2 2 6
c 1 1        c[0] = 1  c[1] = 1,  {1}
c 1 1 2      c[2] = c[1] + c[0],  {2,2; 22}
c 1 1 2 3    c[3] = c[2] + c[1],  {2,2,6; 22,6; 2,26}
*/

class Solution {
public:
    int numDecodings(string s) {
        if(s.empty()) return 0;
        int len = s.size();
        vector<int> c(len+1, 0);
        c[0] = 1;
        if(s[0] != '0') c[1] = 1;
        for(int i = 2; i <= len; i++){
            if(s[i-1] != '0') c[i] = c[i-1];
            if(s[i-2] == '1' || (s[i-2] == '2' && s[i-1] <= '6')) c[i] += c[i-2];
        }
        return c[len];
    }
};
