/*
Given a string S, we can transform every letter individually to be lowercase or uppercase to create another string.  Return a list of all possible strings we could create.

Examples:
Input: S = "a1b2"
Output: ["a1b2", "a1B2", "A1b2", "A1B2"]

Input: S = "3z4"
Output: ["3z4", "3Z4"]

Input: S = "12345"
Output: ["12345"]
Note:

S will be a string with length between 1 and 12.
S will consist only of letters or digits.
*/

// DFS

class Solution {
public:
    vector<string> letterCasePermutation(string S) {
        vector<string> res;
        helper(S, res, 0);
        return res;
    }
    
    void helper(string s, vector<string>& res, int pos) {
        if(pos == s.length()) {
            res.push_back(s);
            return;
        }
        
        if(s[pos] >='0' && s[pos] <= '9') {
            helper(s, res, pos+1);
            return;
        }
        
        s[pos] = tolower(s[pos]);
        helper(s, res, pos+1);
        
        s[pos] = toupper(s[pos]);
        helper(s, res, pos+1);
    }
    
};

// BFS
class Solution {
public:
    vector<string> letterCasePermutation(string S) {
        vector<string> res;
        queue<string> que;
        que.push(S);
        for(int i = 0; i < S.length(); i++) {
            if(S[i] >= '0' && S[i] <= '9') continue;
            int size = que.size();
            for(int j = 0; j < size; j++) {
                string t = que.front();
                que.pop();
                t[i] = tolower(t[i]);
                que.push(t);
                t[i] = toupper(t[i]);
                que.push(t);
            }
        }
        while(!que.empty()) {
            res.push_back(que.front());
            que.pop();
        }
        return res;
    }
}
