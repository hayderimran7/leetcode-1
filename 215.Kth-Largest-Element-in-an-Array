/*
Find the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element.

Example 1:

Input: [3,2,1,5,6,4] and k = 2
Output: 5
Example 2:

Input: [3,2,3,1,2,4,5,5,6] and k = 4
Output: 4
Note: 
You may assume k is always valid, 1 ≤ k ≤ array's length.
*/

class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        int l = 0, r = nums.size()-1;
        
        while(true){
            int pos = partition(nums, l, r);
            if(pos == k-1) return nums[pos];
            else if(pos < k-1) l = pos+1;
            else r = pos-1;
        }
    }
    
    int partition(vector<int>& nums, int l, int r){
        int p = nums[l];
        int i = l+1, j = r;
        while(i <= j){
            if(nums[i] < p && nums[j] > p) {
                swap(nums[i], nums[j]);
                i++; j--;
            }
            if(nums[i]>=p) i++;
            if(nums[j]<=p) j--;
        }
        swap(nums[l], nums[j]);
        return j;
    }
};
