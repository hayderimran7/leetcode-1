/*
Given a collection of numbers that might contain duplicates, return all possible unique permutations.

Example:

Input: [1,1,2]
Output:
[
  [1,1,2],
  [1,2,1],
  [2,1,1]
]
*/

/*
key point:
1. need sort
2. if(i > 0 && num[i] == num[i-1] && !visited[i-1]) continue

     1    1    2
1)   v -> v -> v => 1,1,2
2)   v ------> v => 1,2,1
           <--
3)     <- v      XX duplicate
4)   v <------ v
       -> v      => 2,1,1
5)        v <- v
      <--        XX duplicate
*/

class Solution {
public:
    vector<vector<int> > permuteUnique(vector<int> &num) {
        vector<vector<int> > rst;
        if(num.empty()) return rst;
        
        sort(num.begin(), num.end());
        vector<int> past;
        vector<bool> visited(num.size(), false);
        helper(num, visited, past, rst);
        
        return rst;
    }
    
    void helper(vector<int> &num, vector<bool>& visited, vector<int>& past, vector<vector<int> >& rst){
        if(past.size() == num.size()){
            rst.push_back(past);
            return;
        }

        for(int i = 0; i < num.size(); i++){
            if(!visited[i]){
                if(i > 0 && num[i] == num[i-1] && !visited[i-1]) continue;
                visited[i] = true;
                past.push_back(num[i]);
                helper(num, visited, past, rst);
                past.pop_back();
                visited[i] = false;
            }
        }
    }
};
