/*
The set [1,2,3,...,n] contains a total of n! unique permutations.

By listing and labeling all of the permutations in order, we get the following sequence for n = 3:

"123"
"132"
"213"
"231"
"312"
"321"
Given n and k, return the kth permutation sequence.

Note:

Given n will be between 1 and 9 inclusive.
Given k will be between 1 and n! inclusive.
Example 1:

Input: n = 3, k = 3
Output: "213"
Example 2:

Input: n = 4, k = 9
Output: "2314"
*/

class Solution {
public:
    string getPermutation(int n, int k) {
        
        int perm = 1;
        int a[n], b[n];
        for(int i = 0; i < n; i++){
            perm *= (i+1);
            a[i] = i+1;
        }

        int tmp = k-1;
        for(int i = 0; i<n; i++){
            perm /= (n-i);
            int idx = tmp/perm;
            b[i] = a[idx];

            for(int j = idx; j < n-i; j++){
                a[j] = a[j+1];
            }
            tmp = tmp%perm;
        }
        
        return tostring(n, b);
    }
    
    string tostring(int n, int b[]){
        ostringstream s;
        for(int i = 0; i < n; i++) s << b[i];
        return s.str();
    }
};
