/*
Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.

Note: A leaf is a node with no children.

Example:

Given the below binary tree and sum = 22,

      5
     / \
    4   8
   /   / \
  11  13  4
 /  \    / \
7    2  5   1
Return:

[
   [5,4,11,2],
   [5,8,4,5]
]
*/


/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int> > pathSum(TreeNode *root, int sum) {
        vector<vector<int> > rst;
        if(!root)return rst;

        vector<int> path;
        findsum(root, path, sum, rst);
        
        return rst;
    }
    
    void findsum(TreeNode *root, vector<int>& path, int sum, vector<vector<int> >& rst) {
        if(!root) return;
        
        path.push_back(root->val);
        if(!root->left && !root->right && root->val == sum) {
            rst.push_back(path);
            // here we have two choice: 1. pop back of path and return
            // 2. delete these two lines, pop back path at function end
            path.pop_back();
            return;
        }
        
        findsum(root->left, path, sum-root->val, rst);
        findsum(root->right, path, sum-root->val, rst);
        path.pop_back();
    }
};
