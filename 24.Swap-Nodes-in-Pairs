/*
Given a linked list, swap every two adjacent nodes and return its head.

Example:

Given 1->2->3->4, you should return the list as 2->1->4->3.
Note:

Your algorithm should use only constant extra space.
You may not modify the values in the list's nodes, only nodes itself may be changed.

*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */

ListNode *swapPairs(ListNode *head) {
        if(!head || !head->next) return head;
        
        ListNode h(0);
        h.next = head;
        ListNode* pre = &h;
        ListNode* cur = head;
        int c = 0;
        while(cur){
            c++;
            if(c%2==0){
                pre = reverse(pre, cur->next);
                cur = pre->next;
            }
            else {
                cur = cur->next;
            }
        }
        return h.next;
    }
    
    ListNode* reverse(ListNode *pre, ListNode * post){
        ListNode* cur = pre->next;
        while(cur->next != post){
            ListNode* tmp = cur->next;
            cur->next = tmp->next;
            tmp->next = pre->next;
            pre->next = tmp;
        }
        return cur;
    }

