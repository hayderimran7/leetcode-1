/*
Given an array nums of n integers where n > 1,  return an array output such that output[i] is equal to the product of all the elements of nums except nums[i].

Example:

Input:  [1,2,3,4]
Output: [24,12,8,6]

Note: Please solve it without division and in O(n).

Follow up:
Could you solve it with constant space complexity? (The output array does not count as extra space for the purpose of space complexity analysis.)
*/

class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int len = nums.size();
        vector<int> left(len, 1);
        vector<int> right(len, 1);
        vector<int> rst(len, 0);
        
        for(int i = 1; i < len; i++){
            left[i] = left[i-1]*nums[i-1];
        }
        
        for(int i = len-1; i > 0; i--){
            right[i-1] = right[i]*nums[i];
        }
        
        for(int i = 0; i < len; i++){
            rst[i] = left[i]*right[i];
        }
        return rst;
    }
};
