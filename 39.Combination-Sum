/*
Given a set of candidate numbers (candidates) (without duplicates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.

The same repeated number may be chosen from candidates unlimited number of times.

Note:

All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
Example 1:

Input: candidates = [2,3,6,7], target = 7,
A solution set is:
[
  [7],
  [2,2,3]
]
Example 2:

Input: candidates = [2,3,5], target = 8,
A solution set is:
[
  [2,2,2,2],
  [2,3,3],
  [3,5]
]
*/

class Solution {
public:
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<vector<int>> rst;
        if(candidates.empty()) return rst;
        sort(candidates.begin(), candidates.end());
        vector<int> cur;
        sum(candidates, 0, target, cur, rst);
        return rst;
    }
    
    void sum(vector<int>& candidates, int st, int target, vector<int>& cur, vector<vector<int>>& rst){
        if(target == 0){
            rst.push_back(cur);
            return;
        }
        
        for(int i = st; i < candidates.size(); i++){
            if(target < candidates[i]) return;
            cur.push_back(candidates[i]);
            sum(candidates, i, target-candidates[i], cur, rst);
            cur.pop_back();
        }
    }
};
