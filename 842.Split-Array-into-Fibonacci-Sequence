/*
Given a string S of digits, such as S = "123456579", we can split it into a Fibonacci-like sequence [123, 456, 579].

Formally, a Fibonacci-like sequence is a list F of non-negative integers such that:

0 <= F[i] <= 2^31 - 1, (that is, each integer fits a 32-bit signed integer type);
F.length >= 3;
and F[i] + F[i+1] = F[i+2] for all 0 <= i < F.length - 2.
Also, note that when splitting the string into pieces, each piece must not have extra leading zeroes, except if the piece is the number 0 itself.

Return any Fibonacci-like sequence split from S, or return [] if it cannot be done.

Example 1:

Input: "123456579"
Output: [123,456,579]
Example 2:

Input: "11235813"
Output: [1,1,2,3,5,8,13]
Example 3:

Input: "112358130"
Output: []
Explanation: The task is impossible.
Example 4:

Input: "0123"
Output: []
Explanation: Leading zeroes are not allowed, so "01", "2", "3" is not valid.
Example 5:

Input: "1101111"
Output: [110, 1, 111]
Explanation: The output [11, 0, 11, 11] would also be accepted.
Note:

1 <= S.length <= 200
S contains only digits.
*/

class Solution {
public:
    vector<int> splitIntoFibonacci(string S) {
        vector<int> res;
        helper(S, 0, res);
        return res.size()>=3 ? res: vector<int>{};
    }
    
    bool helper(string S, int st, vector<int>& res) {
        if(st == S.length() && res.size() >= 3) {
            return true;
        }
        
        for(int i = st; i < S.length(); i++) {
            if(S[st] == '0' && i > st) break;
            
            long num = atol(S.substr(st, i-st+1).c_str());
            if(num > INT_MAX) break;

            int size = res.size();
            
            if (size >= 2 && num > long(res[size-1]+res[size-2])) {
                break;
            }
            
            if(size <=1 || num == res[size-1]+res[size-2]) {
                res.push_back(int(num));
                if(helper(S, i+1, res)) return true;
                res.pop_back();
            }
        }
        return false;
    }
};
