/*
Given a string containing just the characters '(' and ')', find the length of the longest valid (well-formed) parentheses substring.

Example 1:

Input: "(()"
Output: 2
Explanation: The longest valid parentheses substring is "()"
Example 2:

Input: ")()())"
Output: 4
Explanation: The longest valid parentheses substring is "()()"
*/

// idea is use stack to store the index
// if stack is empty, length is current index+1
// otherwise if match (), then length is current index - stk.top

int longestValidParentheses(string s) {
        int rst = 0;
        stack<int> stk;
        
        for(int i = 0; i < s.size(); i++){
            if(s[i] == '('){
                stk.push(i);
            }
            else {
                if(!stk.empty() && s[stk.top()] == '('){
                    stk.pop();
                    if(stk.empty()) rst = i+1;
                    else rst = max(rst, i-stk.top());
                }
                else stk.push(i);
            }
        }
        
        return rst;
    }

