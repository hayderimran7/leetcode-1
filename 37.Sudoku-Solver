/*
Write a program to solve a Sudoku puzzle by filling the empty cells.

A sudoku solution must satisfy all of the following rules:

Each of the digits 1-9 must occur exactly once in each row.
Each of the digits 1-9 must occur exactly once in each column.
Each of the the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.
Empty cells are indicated by the character '.'.
*/

class Solution {
public:
    void solveSudoku(vector<vector<char> > &board) {
        helper(0, 0, board);
    }
    
    bool helper(int i, int j, vector<vector<char> > &board){
        if(i == 9) return true;
        if(j == 9) return helper(i+1, 0, board);
        
        if(board[i][j] != '.')
            return helper(i, j+1, board);

        for(int k = 1; k <=9; k++){
            board[i][j] = k+'0';
            if(isValid(board, i, j)){
                if(helper(i, j+1, board)) return true;
            }
            board[i][j] = '.';
        }
        return false;
    }
    
    bool isValid(vector<vector<char> > &board, int x, int y)  
    {  
        int i, j;  
        for (i = 0; i < 9; i++)  
            if (i != x && board[i][y] == board[x][y])  
                return false;  
        for (j = 0; j < 9; j++)  
            if (j != y && board[x][j] == board[x][y])  
                return false;  
        for (i = 3 * (x / 3); i < 3 * (x / 3 + 1); i++)  
            for (j = 3 * (y / 3); j < 3 * (y / 3 + 1); j++)  
                if (i != x && j != y && board[i][j] == board[x][y])  
                    return false;  
        return true;  
    }
};
