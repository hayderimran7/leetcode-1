/*
Given preorder and inorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.

For example, given

preorder = [3,9,20,15,7]
inorder = [9,3,15,20,7]
Return the following binary tree:

    3
   / \
  9  20
    /  \
   15   7
*/


/*
Use a simple binary tree for example
  2
 / \
1   3

Inorder  : 1 2 3
Preorder : 2 1 3

we can see in Preoder, from 0 to end every position is root of binary subtree.
then how can we know what the left and right child of that root
we need find positon in Inorder to divide to left and right subtree
*/

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode *buildTree(vector<int> &preorder, vector<int> &inorder) {
        if(preorder.empty() || inorder.empty() || preorder.size() != inorder.size()) return NULL;
        
        int pos = 0;
        return findroot(preorder, inorder, 0, inorder.size()-1, pos);
    }
    
    TreeNode * findroot(vector<int> &preorder, vector<int> &inorder, int instart, int inend, int& pos) {
        if(instart > inend) return NULL;
        int i = search(inorder, instart, inend, preorder[pos]);

        TreeNode* root = new TreeNode(preorder[pos]);
        pos++;

        root->left = findroot(preorder, inorder, instart, i-1, pos);
        root->right = findroot(preorder, inorder, i+1, inend, pos);
        
        return root;
    }
    
    int search(vector<int> &inorder, int begin, int end, int value){
        int i = 0;
        for(i = begin; i <= end; i++){
            if(inorder[i] == value){
                return i;
            }
        }
    }
};
