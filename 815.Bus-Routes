/*
We have a list of bus routes. Each routes[i] is a bus route that the i-th bus repeats forever. For example if routes[0] = [1, 5, 7], this means that the first bus (0-th indexed) travels in the sequence 1->5->7->1->5->7->1->... forever.

We start at bus stop S (initially not on a bus), and we want to go to bus stop T. Travelling by buses only, what is the least number of buses we must take to reach our destination? Return -1 if it is not possible.

Example:
Input: 
routes = [[1, 2, 7], [3, 6, 7]]
S = 1
T = 6
Output: 2
Explanation: 
The best strategy is take the first bus to the bus stop 7, then take the second bus to the bus stop 6.
Note:

1 <= routes.length <= 500.
1 <= routes[i].length <= 500.
0 <= routes[i][j] < 10 ^ 6.
*/

class Solution {
public:
    int numBusesToDestination(vector<vector<int>>& routes, int S, int T) {
        unordered_map<int, unordered_set<int>> stop_routes;
        for(int i = 0; i < routes.size(); i++) {
            for(auto stop : routes[i]) {
                stop_routes[stop].insert(i);
            }
        }
        unordered_set<int> visited = {S};
        // pair of bus_stop, bus count 
        queue<pair<int, int>> q;
        q.push(make_pair(S, 0));
        while(!q.empty()) {
            pair<int, int> p = q.front();
            q.pop();
            
            int stop = p.first;
            int count = p.second;
            
            if(stop == T) return count;
            for(auto& rt : stop_routes[stop]) {
                for(auto& next_stop : routes[rt]) {
                    if(!visited.count(next_stop)) {
                        visited.insert(next_stop);
                        q.push(make_pair(next_stop, count+1));
                    }
                }
            }
        }
        return -1;
    }
};
