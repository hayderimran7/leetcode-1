/*
Given inorder and postorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.

For example, given

inorder = [9,3,15,20,7]
postorder = [9,15,7,20,3]
Return the following binary tree:

    3
   / \
  9  20
    /  \
   15   7
*/


/*
Similiar with 105, difference is from end to 0 is the root. 
Use a simple binary tree for example
  2
 / \
1   3

Inorder   : 1 2 3
Postorder : 1 3 2

how can we know what the left and right child of that root
we need find positon in Inorder to divide to left and right subtree
*/



/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode *buildTree(vector<int> &inorder, vector<int> &postorder) {
        if(inorder.empty() || postorder.empty() || inorder.size() != postorder.size()) return NULL;
        
        int pos = postorder.size() -1;
        
        return getRoot(inorder, postorder, 0, inorder.size()-1, pos);
    }
    
    TreeNode* getRoot(vector<int> &inorder, vector<int> &postorder, int begin, int end, int& pos) {
        if(begin > end) return NULL;

        TreeNode* root = new TreeNode(postorder[pos]);
        int i = search(inorder, begin, end, postorder[pos]);
        pos--;

        root->right = getRoot(inorder, postorder, i+1, end, pos);
        root->left = getRoot(inorder, postorder, begin, i-1, pos);

        return root;
    }
    
    int search(vector<int> &inorder, int begin, int end, int value) {
        for(int i = begin; i <= end; i++) {
            if(inorder[i] == value) return i;
        }
    }
};
