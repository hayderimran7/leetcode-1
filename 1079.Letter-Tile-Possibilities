/*
You have a set of tiles, where each tile has one letter tiles[i] printed on it.  Return the number of possible non-empty sequences of letters you can make.

 

Example 1:

Input: "AAB"
Output: 8
Explanation: The possible sequences are "A", "B", "AA", "AB", "BA", "AAB", "ABA", "BAA".
Example 2:

Input: "AAABBC"
Output: 188
 

Note:

1 <= tiles.length <= 7
tiles consists of uppercase English letters.
*/


// use "AAB" as an example
// length 1:  A 0 B 1; A 1 B 0 =>  2
// length 2:  A 2 B 0; A 1 B1 => A 1 (A 1 B 0) + A 1 B 1 => A 1 (A 1 B 0) + A 1 (A 0 B 1) + B 1 (A 0 B 1) => 3
// leghth 3:  A 2 B 1 =>  A 1(A 1 B 1) + B 1 (A 2 B 0) => 3
// so add up to 2 + 3 + 3
// in recursive we don't count each level, instead we count left sequence after pick one char as start
// A 1 B 1 => choose A we got A itself, and AB
//            choose B we got B itself, and BA
// A 2 B 1 => choose A we got A itself, and A 1 B1 will get  A, B, AB, BA, add the front A will get AA, AB, AAB, ABA, count = 5
//         => choose B we got B itself, and A2 will get A, AA, add the front B will get BA, BAA, count = 3
//         => total count = 5 + 3 = 8

class Solution {
public:
    int numTilePossibilities(string tiles) {
        int count[26] = {0};
        for(int i = 0; i < tiles.length(); i++) {
            count[tiles[i]-'A']++;
        }
        return dfs(count);
    }
    
    int dfs(int count[]) {
        int sum = 0;
        for(int i = 0; i < 26; i++) {
            if(count[i] == 0) continue;
            sum++;// start from this char in this level
            count[i]--;
            sum += dfs(count);
            count[i]++;
        }
        return sum;
    }
};
