/*
You are given an integer array nums and you have to return a new counts array. The counts array has the property where counts[i] is the number of smaller elements to the right of nums[i].

Example:

Input: [5,2,6,1]
Output: [2,1,1,0] 
Explanation:
To the right of 5 there are 2 smaller elements (2 and 1).
To the right of 2 there is only 1 smaller element (1).
To the right of 6 there is 1 smaller element (1).
To the right of 1 there is 0 smaller element.

*/

// binary search

class Solution {
public:

    vector<int> countSmaller(vector<int>& nums) {
        vector<int> ans(nums.size(), 0), sortedNums;
        for(int i = nums.size() - 1; i >= 0; i--){
            int idx = binarySearch(sortedNums, nums[i]);
            ans[i] = idx;
            sortedNums.insert(sortedNums.begin() + idx, nums[i]);
        }
        return ans;
    }

    // find the first position greater than or equal to target in sortedNums
    int binarySearch(vector<int>& sortedNums, int target){
        int l = 0, r = sortedNums.size();
        while(l < r){
            int m = l + (r - l) / 2; 
            if(sortedNums[m] < target) l = m + 1;
            else r = m;
        }

        return l;
    }
};

