/*
Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, add spaces in s to construct a sentence where each word is a valid dictionary word. Return all such possible sentences.

Note:

The same word in the dictionary may be reused multiple times in the segmentation.
You may assume the dictionary does not contain duplicate words.
Example 1:

Input:
s = "catsanddog"
wordDict = ["cat", "cats", "and", "sand", "dog"]
Output:
[
  "cats and dog",
  "cat sand dog"
]
Example 2:

Input:
s = "pineapplepenapple"
wordDict = ["apple", "pen", "applepen", "pine", "pineapple"]
Output:
[
  "pine apple pen apple",
  "pineapple pen apple",
  "pine applepen apple"
]
Explanation: Note that you are allowed to reuse a dictionary word.
Example 3:

Input:
s = "catsandog"
wordDict = ["cats", "dog", "sand", "and", "cat"]
Output:
[]
*/


class Solution {
    unordered_map<string, vector<string>> mp;

public:
    vector<string> wordBreak(string s, unordered_set<string> &dict) {
        if(mp.find(s) != mp.end()) return mp[s];
        
        vector<string> rst;
        if(dict.find(s) != dict.end()) rst.push_back(s);
        
        for(int i = 1; i < s.size(); i++){
            string sub = s.substr(i);
            if(dict.find(sub) != dict.end()){
                vector<string> pre = wordBreak(s.substr(0, i), dict);
                for(int j = 0; j < pre.size(); j++){
                    rst.push_back(pre[j] + " " + sub);
                }
            }
        }
        mp[s] = rst;
        return rst;
    }
};
