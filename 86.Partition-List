/*
Given a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.

You should preserve the original relative order of the nodes in each of the two partitions.

Example:

Input: head = 1->4->3->2->5->2, x = 3
Output: 1->2->2->4->3->5
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *partition(ListNode *head, int x) {
        if(!head || !head->next) return head;
        
        ListNode smallHead(0);
        ListNode bigHead(0);
        ListNode* cur = head;
        ListNode* s = &smallHead, *b = &bigHead;
        
        while(cur){
            if(cur->val < x) {
                s->next = cur;
                s = s->next;
            }
            else {
                b->next = cur;
                b = b->next;
            }
            cur = cur->next;
        }
        //merge
        s->next = bigHead.next;
        b->next = NULL;
        return smallHead.next;
    }
};
