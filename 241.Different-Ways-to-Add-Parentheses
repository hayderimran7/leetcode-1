/*
Given a string of numbers and operators, return all possible results from computing all the different possible ways to group numbers and operators. The valid operators are +, - and *.

Example 1:

Input: "2-1-1"
Output: [0, 2]
Explanation: 
((2-1)-1) = 0 
(2-(1-1)) = 2

Example 2:

Input: "2*3-4*5"
Output: [-34, -14, -10, -10, 10]
Explanation: 
(2*(3-(4*5))) = -34 
((2*3)-(4*5)) = -14 
((2*(3-4))*5) = -10 
(2*((3-4)*5)) = -10 
(((2*3)-4)*5) = 10

*/

/*
add Parentheses is like break at the operator position, calculate possible result befor and after the break operator
then use current operator to get result: pre op post
go through the string, break at each operator position
for example:
    2*3-4*5
1.  2 * (3-4*5)  -- break at first operator *
   1.1 => 2 * (3-(4*5)) -- substring break at first operator - 
   1.2 => 2 * ((3-4)*5) -- substring break at second operator *

2. (2*3)-(4*5)   -- break at second operator -
   2.1 => (2*3)-(4*5)

3. (2*3-4)*5     -- break at third operator *
   3.1 => ((2*3)-4) * 5    -- substring break at first operator *
   3.2 => (2*(3-4)) * 5    -- substring break at second operator -
*/


class Solution {
public:
    vector<int> diffWaysToCompute(string input) {
        vector<int> result;
        int len = input.length();
        for (int i = 0; i < len; i++) {
            char cur = input[i];
            if (cur == '+' || cur == '-' || cur == '*') {
                vector<int> result1 = diffWaysToCompute(input.substr(0, i));
                vector<int> result2 = diffWaysToCompute(input.substr(i+1));
                for(int j = 0; j < result1.size(); j++) {
                    for(int k = 0; k < result2.size(); k++) {
                        if (cur == '+')
                            result.push_back(result1[j] + result2[k]);
                        else if (cur == '-')
                            result.push_back(result1[j] - result2[k]);
                        else
                            result.push_back(result1[j] * result2[k]);
                    }
                }
            }
        }
        // if the input string contains only number
        if (result.empty())
            result.push_back(atoi(input.c_str()));
        return result;
    }
};
