/*
We have a collection of rocks, each rock has a positive integer weight.

Each turn, we choose any two rocks and smash them together.  Suppose the stones have weights x and y with x <= y.  The result of this smash is:

If x == y, both stones are totally destroyed;
If x != y, the stone of weight x is totally destroyed, and the stone of weight y has new weight y-x.
At the end, there is at most 1 stone left.  Return the smallest possible weight of this stone (the weight is 0 if there are no stones left.)

 

Example 1:

Input: [2,7,4,1,8,1]
Output: 1
Explanation: 
We can combine 2 and 4 to get 2 so the array converts to [2,7,1,8,1] then,
we can combine 7 and 8 to get 1 so the array converts to [2,1,1,1] then,
we can combine 2 and 1 to get 1 so the array converts to [1,1,1] then,
we can combine 1 and 1 to get 0 so the array converts to [1] then that's the optimal value.
 

Note:

1 <= stones.length <= 30
1 <= stones[i] <= 100
*/

// divide to 2 group which sum are S1, S2; S1+S2=S, S1-S2=diff
// diff = S - 2*S2, we need to find the maximum S2 closest to S/2 can be added by stones
// then becomes a target sum or coin change question
// use DP, dp[i] is the sum value i can get by part of stones

class Solution {
public:
    int lastStoneWeightII(vector<int>& stones) {
        // here 1501 because stones.length <= 30 * stones[i] <= 100
        // 30*100/2 = 1500, add 1 then get 1501
        vector<bool> dp(1501, false);
        dp[0] = true;
        int sum = 0;
        for(auto a : stones) {
            sum += a;
            // here use min(sum, 1500) instead of 1500 to run faster
            for(int i = min(sum, 1500); i >= a; i--) {
                dp[i] =  dp[i] || dp[i-a];
            }
        }
        
        for(int i = sum/2; i > 0; i--) {
            if(dp[i]) return sum - i - i;
        }
        return 0;
    }
};
