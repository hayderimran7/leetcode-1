/*
Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*'.

'?' Matches any single character.
'*' Matches any sequence of characters (including the empty sequence).
The matching should cover the entire input string (not partial).

Note:

s could be empty and contains only lowercase letters a-z.
p could be empty and contains only lowercase letters a-z, and characters like ? or *.
Example 1:

Input:
s = "aa"
p = "a"
Output: false
Explanation: "a" does not match the entire string "aa".
Example 2:

Input:
s = "aa"
p = "*"
Output: true
Explanation: '*' matches any sequence.
Example 3:

Input:
s = "cb"
p = "?a"
Output: false
Explanation: '?' matches 'c', but the second letter is 'a', which does not match 'b'.
Example 4:

Input:
s = "adceb"
p = "*a*b"
Output: true
Explanation: The first '*' matches the empty sequence, while the second '*' matches the substring "dce".
Example 5:

Input:
s = "acdcb"
p = "a*c?b"
Output: false
*/

class Solution {
public:
    bool isMatch(string s, string p) {
        int pos_s = -1, pos_p = -1, i = 0, j = 0;
        int slen = s.length();
        int plen = p.length();

        while(i < slen){
            if(s[i] == p[j] || p[j] == '?'){
                i++; j++;
            }
            else {
                if(p[j] == '*'){
                    while(p[j] == '*') j++;
                    if(j == plen) return true;
                    pos_s = i;
                    pos_p = j;
                }
                else {
                    if(pos_s != -1){
                        i = ++pos_s;
                        j = pos_p;
                    }
                    else
                        return false;
                }
            }
        }
        
        while(p[j] == '*'){
            j++;
        }
        
        return i == slen && j == plen;
    }

};
