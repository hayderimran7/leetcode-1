/*
Given an integer n, generate all structurally unique BST's (binary search trees) that store values 1 ... n.

Example:

Input: 3
Output:
[
  [1,null,3,2],
  [3,2,null,1],
  [3,1,null,null,2],
  [2,1,3],
  [1,null,2,null,3]
]
Explanation:
The above output corresponds to the 5 unique BST's shown below:

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3
*/

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<TreeNode *> generateTrees(int n) {
        return generate(1, n);
    }
    
    vector<TreeNode *> generate(int l, int r){
        vector<TreeNode *> rst;
        if(l > r) {
            TreeNode* tmp = NULL;
            rst.push_back(tmp);
            return rst;
        }

        for(int i = l; i <= r; i++) {
            vector<TreeNode *> lt = generate(l, i-1);
            vector<TreeNode *> rt = generate(i+1, r);
            for(int j = 0; j < lt.size(); j++) {
                for(int k = 0; k < rt.size(); k++) {
                    TreeNode* root = new TreeNode(i);
                    root->left = lt[j];
                    root->right = rt[k];
                    rst.push_back(root);
                }
            }
        }
        return rst;
    }
};
