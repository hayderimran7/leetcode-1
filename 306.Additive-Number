/*
Additive number is a string whose digits can form additive sequence.

A valid additive sequence should contain at least three numbers. Except for the first two numbers, each subsequent number in the sequence must be the sum of the preceding two.

Given a string containing only digits '0'-'9', write a function to determine if it's an additive number.

Note: Numbers in the additive sequence cannot have leading zeros, so sequence 1, 2, 03 or 1, 02, 3 is invalid.

Example 1:

Input: "112358"
Output: true 
Explanation: The digits can form an additive sequence: 1, 1, 2, 3, 5, 8. 
             1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8

Example 2:

Input: "199100199"
Output: true 
Explanation: The additive sequence is: 1, 99, 100, 199. 
             1 + 99 = 100, 99 + 100 = 199

Follow up:
How would you handle overflow for very large input integers?
*/

class Solution {
public:
    bool isAdditiveNumber(string num) {
        for(int i = 1; i <= num.size()/2; i++) {
            for(int j = 1; j <= (num.size()-i)/2; j++) {
                if (i >= 2 && num[0] == '0' || j >= 2 && num[i] == '0' || num[i+j] == '0') 
                    continue;
                if (addNum(stol(num.substr(0,i)), stol(num.substr(i,j)), num.substr(i+j))) 
                    return true;
            }
        }
        return false;
    }

    bool addNum(long num1, long num2, string num){
        if (num.size() > 1 && num[0] == '0') return false;
        long sum = num1 + num2, numI = stol(num);
        long len = static_cast<long>(log10(sum)) + 1;
        if (numI == sum) return true;
        if (numI < sum || sum != stol(num.substr(0, len))) return false;
        else return addNum(num2, sum, num.substr(len));
    }
};
