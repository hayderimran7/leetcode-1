/*
There are a total of n courses you have to take, labeled from 0 to n-1.

Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]

Given the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?

Example 1:

Input: 2, [[1,0]] 
Output: true
Explanation: There are a total of 2 courses to take. 
             To take course 1 you should have finished course 0. So it is possible.
Example 2:

Input: 2, [[1,0],[0,1]]
Output: false
Explanation: There are a total of 2 courses to take. 
             To take course 1 you should have finished course 0, and to take course 0 you should
             also have finished course 1. So it is impossible.
Note:

The input prerequisites is a graph represented by a list of edges, not adjacency matrices. Read more about how a graph is represented.
You may assume that there are no duplicate edges in the input prerequisites.
*/


class Solution {
public:

    bool canFinish(int numCourses, vector<pair<int, int>>& prerequisites) {
        if(prerequisites.empty() || numCourses <= 0) return true;
        unordered_map<int, vector<int> > vmap;
        for(int i = 0; i < prerequisites.size(); ++i){
            vmap[prerequisites[i].first].push_back(prerequisites[i].second);
        }
        
        unordered_map<int, bool> visited, marked;
        for(auto it = vmap.begin(); it != vmap.end(); ++it){
            visited[it->first] = false;
            marked[it->first] = false;
        }
        
        for(auto it = vmap.begin(); it != vmap.end(); ++it){
            if(!visited[it->first]){
                if(isCycle(it->first, visited, marked, vmap)) return false;
            }
        }

        return true;
    }
    
    bool isCycle(int cur, unordered_map<int, bool>& visited, 
        unordered_map<int, bool>& marked, unordered_map<int, vector<int> >& vmap){
        if(visited[cur]) return false;
        marked[cur] = visited[cur] = true;
        for(int i = 0; i < vmap[cur].size(); ++i){
            if(marked[vmap[cur][i]] || isCycle(vmap[cur][i], visited, marked, vmap)) return true;
        }
        marked[cur] = false;
        return false;
    }
};
