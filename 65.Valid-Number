/*
Validate if a given string can be interpreted as a decimal number.

Some examples:
"0" => true
" 0.1 " => true
"abc" => false
"1 a" => false
"2e10" => true
" -90e3   " => true
" 1e" => false
"e3" => false
" 6e-1" => true
" 99e2.5 " => false
"53.5e93" => true
" --6 " => false
"-+3" => false
"95a54e53" => false

Note: It is intended for the problem statement to be ambiguous. You should gather all requirements up front before implementing one. However, here is a list of characters that can be in a valid decimal number:

Numbers 0-9
Exponent - "e"
Positive/negative sign - "+"/"-"
Decimal point - "."
Of course, the context of these characters also matters in the input.
*/

// think about example   " -123.45e-67 "

class Solution {
public:
    bool isNumber(string s) {
        if(s.empty()) return false;
        int i = 0;
        while(s[i] == ' ') i++;
        if(s[i] == '+' || s[i] == '-')i++;
        int n1 = 0;
        while(isdigit(s[i])){
            n1++;
            i++;
        }
        if(s[i] == '.') i++;
        int n2 = 0;
        while(isdigit(s[i])){
            n2++;
            i++;
        }
        if(n1+n2 == 0) return false;
        
        if(s[i] == 'E' || s[i] == 'e'){
            i++;
            if(s[i] == '+' || s[i] == '-')i++;
            int n3 = 0;
            while(isdigit(s[i])){
                i++;
                n3++;
            }
            if(n3 == 0) return false;
        }
        while(s[i] == ' ') i++;

        return i == s.length();
    }
    
    bool isdigit(char t){
        if(t-'0'>=0 && t-'0'<=9)return true;
        return false;
    }
};
