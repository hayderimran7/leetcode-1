/*
Given a string text, we are allowed to swap two of the characters in the string. Find the length of the longest substring with repeated characters.

 

Example 1:

Input: text = "ababa"
Output: 3
Explanation: We can swap the first 'b' with the last 'a', or the last 'b' with the first 'a'. Then, the longest repeated character substring is "aaa", which its length is 3.
Example 2:

Input: text = "aaabaaa"
Output: 6
Explanation: Swap 'b' with the last 'a' (or the first 'a'), and we get longest repeated character substring "aaaaaa", which its length is 6.
Example 3:

Input: text = "aaabbaaa"
Output: 4
Example 4:

Input: text = "aaaaa"
Output: 5
Explanation: No need to swap, longest repeated character substring is "aaaaa", length is 5.
Example 5:

Input: text = "abcdef"
Output: 1
 

Constraints:

1 <= text.length <= 20000
text consist of lowercase English characters only.
*/


class Solution {
public:
    int maxRepOpt1(string text) {
        int res = 0;
        vector<vector<int>> index(26);
        for(int i = 0; i < text.size(); i++) {
            index[text[i]-'a'].push_back(i); // all index of a char in input text
        }
        for(int i = 0; i < 26; i++) {
            int cnt = 1, pre_cnt = 0, max_count = 0;
            
            for(int j = 1; j < index[i].size(); j++) {
                if(index[i][j] == index[i][j-1]+1) cnt++; // if char i is continuous
                else {
                    if(index[i][j] == index[i][j-1] + 2) { // if char i has one char gap
                        pre_cnt = cnt;
                    } else { // if gap is more than one char
                        pre_cnt = 0;
                    }
                    cnt = 1;
                }
                max_count = max(max_count, cnt+pre_cnt);// max of current char i
            }
            
            res = max(res, max_count + (index[i].size() > max_count ? 1 : 0)); // max of all char in input text, index[i].size() > max_count means more more char i can be swapped to continuous
        }
        return res;
    }
};
