/*
Given an integer matrix, find the length of the longest increasing path.

From each cell, you can either move to four directions: left, right, up or down. You may NOT move diagonally or move outside of the boundary (i.e. wrap-around is not allowed).

Example 1:

Input: nums = 
[
  [9,9,4],
  [6,6,8],
  [2,1,1]
] 
Output: 4 
Explanation: The longest increasing path is [1, 2, 6, 9].

Example 2:

Input: nums = 
[
  [3,4,5],
  [3,2,6],
  [2,2,1]
] 
Output: 4 
Explanation: The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.
*/

class Solution {
public:
    int longestIncreasingPath(vector<vector<int>>& matrix) {
        if(matrix.empty()) return 0;
        if(matrix[0].empty()) return 0;
        int m = matrix.size(), n = matrix[0].size();
        vector<vector<int>> visit(m, vector<int>(n, 0));
        int rst = 0;
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                rst = max(rst, dfs(matrix, i, j, INT_MIN, visit));
            }
        }
        return rst;
    }

    int dfs(vector<vector<int>>& matrix, int i, int j, int val, vector<vector<int>>& visit){
        if(i<0 || i >= matrix.size() || j < 0 || j >= matrix[0].size()) 
            return 0;

        if(matrix[i][j] > val) {
            if(visit[i][j] > 0) return visit[i][j];
            int a = dfs(matrix, i, j+1, matrix[i][j], visit) + 1;
            int b = dfs(matrix, i, j-1, matrix[i][j], visit) + 1;
            int c = dfs(matrix, i+1, j, matrix[i][j], visit) + 1;
            int d = dfs(matrix, i-1, j, matrix[i][j], visit) + 1;
            visit[i][j] = max(a, max(b,max(c, d)));
            return visit[i][j];
            
        }
        return 0;
    }
};
