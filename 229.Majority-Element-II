/*
Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.

Note: The algorithm should run in linear time and in O(1) space.

Example 1:

Input: [3,2,3]
Output: [3]

Example 2:

Input: [1,1,1,3,3,2,2,2]
Output: [1,2]

*/

class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        vector<int> rst;
        if(nums.empty()) return nums;
        
        int c1 = 0, c2 = 0, num1 = nums[0], num2 = nums[1];
        for(int i = 0; i < nums.size(); i++){
            if(nums[i] == num1) c1++;
            else if(nums[i] == num2) c2++;
            else if(0 == c1) {
                num1 = nums[i];
                c1 = 1;
            }
            else if(0 == c2) {
                num2 = nums[i];
                c2 = 1;
            }
            else {
                c1 -= 1; c2 -= 1;
            }
        }
        
        c1 = c2 = 0;
        for(auto num : nums) {
            if(num == num1) c1++;
            else if(num == num2) c2++;
        }
        
        if(c1>nums.size()/3) rst.push_back(num1);
        if(c2>nums.size()/3) rst.push_back(num2);

        return rst;
    }
};
