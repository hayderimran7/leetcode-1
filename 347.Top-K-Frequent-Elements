/*
Given a non-empty array of integers, return the k most frequent elements.

Example 1:

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]

Example 2:

Input: nums = [1], k = 1
Output: [1]

Note:

    You may assume k is always valid, 1 ≤ k ≤ number of unique elements.
    Your algorithm's time complexity must be better than O(n log n), where n is the array's size.

*/

// bucket sort, O(n)
class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        vector<int> rst;
        vector<vector<int>> bucket(nums.size());
        unordered_map<int, int> mc;
        for(auto num : nums) {
            mc[num]++;
        }
        for(auto m : mc) {
            bucket[m.second-1].push_back(m.first);
        }
        for(int i = bucket.size()-1; i >=0; i--) {
            if(rst.size() == k) break;
            for(int j = 0; j < bucket[i].size(); j++) {
                rst.push_back(bucket[i][j]);
            }
        }
        return rst;
    }
};

//max_heap, O(nlog(n-k))

class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        unordered_map<int,int> map;
        for(int num : nums){
            map[num]++;
        }

        vector<int> res;
        // pair<first, second>: first is frequency,  second is number
        priority_queue<pair<int,int>> pq; 
        for(auto it = map.begin(); it != map.end(); it++){
            pq.push(make_pair(it->second, it->first));
            if(pq.size() > (int)map.size() - k){
                res.push_back(pq.top().second);
                pq.pop();
            }
        }
        return res;
    }
};
