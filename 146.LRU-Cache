/*
Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and put.

get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
put(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.

Follow up:
Could you do both operations in O(1) time complexity?

Example:

LRUCache cache = new LRUCache( 2 /* capacity */ );

cache.put(1, 1);
cache.put(2, 2);
cache.get(1);       // returns 1
cache.put(3, 3);    // evicts key 2
cache.get(2);       // returns -1 (not found)
cache.put(4, 4);    // evicts key 1
cache.get(1);       // returns -1 (not found)
cache.get(3);       // returns 3
cache.get(4);       // returns 4
*/

// use a list for store <key, value> struct, use hashmap<key, list_iterator> to get O(1)
// when visit one key, move the key to list begin and update hashmap
// when size reach capacity, drop list end and update hashmap


class LRUCache{
public:
    struct node {
    public:
        int key;
        int value;
        node(int k, int v) : key(k), value(v) {}
    };

    LRUCache(int capacity) {
        capacity_ = capacity;
    }
    
    int get(int key) {
        auto it = map_.find(key);
        if(it == map_.end()) return -1;
        int res = it->second->value;
        move(key);
        return res;
    }
    
    void put(int key, int value) {
        if(map_.find(key) == map_.end()){
            if(nodes_.size() == capacity_) {
                map_.erase(nodes_.back().key);
                nodes_.pop_back();
            }
            node t(key, value);
            nodes_.push_front(t);
            map_[key] = nodes_.begin();
        }
        else {
            (*map_[key]).value = value;
            move(key);
        }
    }

private:
    void move(int key) {
        list<node>::iterator it = map_[key];
        node t = *it;
        nodes_.erase(it);
        nodes_.push_front(t);
        map_[key] = nodes_.begin();
    }

private:
    list<node> nodes_;
    unordered_map<int, list<node>::iterator>  map_;
    int capacity_;

};
