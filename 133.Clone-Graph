/*
Given the head of a graph, return a deep copy (clone) of the graph. Each node in the graph contains a label (int) and a list (List[UndirectedGraphNode]) of its neighbors. There is an edge between the given node and each of the nodes in its neighbors.


OJ's undirected graph serialization (so you can understand error output):
Nodes are labeled uniquely.

We use # as a separator for each node, and , as a separator for node label and each neighbor of the node.
 

As an example, consider the serialized graph {0,1,2#1,2#2,2}.

The graph has a total of three nodes, and therefore contains three parts as separated by #.

First node is labeled as 0. Connect node 0 to both nodes 1 and 2.
Second node is labeled as 1. Connect node 1 to node 2.
Third node is labeled as 2. Connect node 2 to node 2 (itself), thus forming a self-cycle.
 

Visually, the graph looks like the following:

       1
      / \
     /   \
    0 --- 2
         / \
         \_/
Note: The information about the tree serialization is only meant so that you can understand error output if you get a wrong answer. You don't need to understand the serialization to solve the problem.
*/

// BFS

/**
 * Definition for undirected graph.
 * struct UndirectedGraphNode {
 *     int label;
 *     vector<UndirectedGraphNode *> neighbors;
 *     UndirectedGraphNode(int x) : label(x) {};
 * };
 */
class Solution {
public:
    typedef unordered_map<UndirectedGraphNode*, UndirectedGraphNode*> MAPS;
    UndirectedGraphNode *cloneGraph(UndirectedGraphNode *node) {
        if(!node) return NULL;
        MAPS maps;
        queue<UndirectedGraphNode*> q;
        q.push(node);
        UndirectedGraphNode* cpnode = new UndirectedGraphNode(node->label);
        maps[node] = cpnode;
        while(!q.empty()){
            UndirectedGraphNode* t = q.front();
            q.pop();
            for(int i = 0; i < t->neighbors.size(); i++){
                UndirectedGraphNode* neighbour = t->neighbors[i];
                MAPS::iterator it = maps.find(neighbour);
                if(it != maps.end()){
                    maps[t]->neighbors.push_back(it->second);
                }
                else {
                    UndirectedGraphNode* cp = new UndirectedGraphNode(neighbour->label);
                    maps[t]->neighbors.push_back(cp);
                    maps[neighbour] = cp;
                    q.push(neighbour);
                }
            }
        }
        
        return cpnode;
    }
};

// DFS

class Solution {
public:
    typedef unordered_map<UndirectedGraphNode*, UndirectedGraphNode*> MAPS;
    UndirectedGraphNode *cloneGraph(UndirectedGraphNode *node) {
        if(!node) return NULL;
        MAPS maps;
        return helper(node, maps);
    }
    
    UndirectedGraphNode* helper(UndirectedGraphNode *node, MAPS& maps){
        if(!node) return NULL;
        MAPS::iterator it = maps.find(node);
        if(it != maps.end()){
            return it->second;
        }

        UndirectedGraphNode *cpnode = new UndirectedGraphNode(node->label);
        maps[node] = cpnode;
        for(int i = 0; i < node->neighbors.size(); i++){
            cpnode->neighbors.push_back(helper(node->neighbors[i], maps));
        }
        return cpnode;
    }
};
