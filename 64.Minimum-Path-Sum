/*
Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.

Example:

Input:
[
  [1,3,1],
  [1,5,1],
  [4,2,1]
]
Output: 7
Explanation: Because the path 1→3→1→1→1 minimizes the sum.
*/


// use one dimentional DP

class Solution {
public:
    int minPathSum(vector<vector<int> > &grid) {
        if(grid.empty()) return 0;
        
        int m = grid.size();
        int n = grid[0].size();
        if(n == 0) return 0;
        
        vector<int> sum(n, INT_MAX);
        sum[0] = 0;
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++){
                if(j > 0)
                    sum[j] = min(sum[j], sum[j-1]) + grid[i][j];
                else 
                    sum[j] += grid[i][j];;
            }
        }
        return sum[n-1];
    }
};
