/*
Sort a linked list in O(n log n) time using constant space complexity.

Example 1:

Input: 4->2->1->3
Output: 1->2->3->4
Example 2:

Input: -1->5->3->4->0
Output: -1->0->3->4->5
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *sortList(ListNode *head) {
        if(!head || !head->next) return head;

        ListNode* slow = head;
        ListNode* fast = head->next;
        
        while(fast && fast->next) {
            slow = slow->next;
            fast = fast->next->next;
        }
        
        fast = slow->next;
        slow->next = NULL;
        
        return merge(sortList(head), sortList(fast));
    }

    ListNode* merge(ListNode* l1, ListNode* l2) {
        ListNode dumy(0);
        ListNode* cur = &dumy;

        while (l1 && l2) {
            if (l1->val < l2->val) {
                cur->next = l1;
                l1 = l1->next;
            }
            else {
                cur->next = l2;
                l2 = l2->next;
            }
            cur = cur->next;
        }

        if (l1) cur->next = l1;
        else cur->next = l2;

        return dumy.next;
    }

    void qsort(ListNode *head, ListNode *end){
        if(head == NULL || head == end) return;
        ListNode* c = head;
        ListNode* s = head->next;
        int pv = head->val;
        while(s != end) {
            if(s->val <= pv) {
                c = c->next;
                swap(c->val, s->val);
            }
            s = s->next;
        }
        swap(head->val, c->val);
        qsort(head, c);
        qsort(c->next, end);
    }
    
    void swap(int& a, int& b){
        if(a != b) {
            int temp = b;
            b = a;
            a = temp;
        }
    }
};
