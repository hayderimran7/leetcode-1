/*
Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its zigzag level order traversal as:
[
  [3],
  [20,9],
  [15,7]
]
*/

// use index in each layer than do reverse
// index = (is left to right) ? i : len-i-1

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int> > zigzagLevelOrder(TreeNode *root) {
        vector<vector<int> > rst;
        if(!root) return rst;
        
        queue<TreeNode*> nodes;
        nodes.push(root);
        bool bltor = true;

        while(!nodes.empty()) {
            int len = nodes.size();
            vector<int> oneLayer(len);
            for(int i = 0; i < len; i++) {
                TreeNode* p = nodes.front();
                nodes.pop();
                int index = bltor ? i : len-i-1;
                oneLayer[index] = p->val;
                if(p->left) {
                    nodes.push(p->left);
                }
                if(p->right){
                    nodes.push(p->right);

                }
            }

            bltor = !bltor;
            rst.push_back(oneLayer);
        }
        
        return rst;
    }
};
