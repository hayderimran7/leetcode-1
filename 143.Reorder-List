/*
Given a singly linked list L: L0→L1→…→Ln-1→Ln,
reorder it to: L0→Ln→L1→Ln-1→L2→Ln-2→…

You may not modify the values in the list's nodes, only nodes itself may be changed.

Example 1:

Given 1->2->3->4, reorder it to 1->4->2->3.
Example 2:

Given 1->2->3->4->5, reorder it to 1->5->2->4->3.
*/


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    void reorderList(ListNode *head) {
        if(!head || !head->next) return;
        
        //find second half
        ListNode *slow = head, *fast = head;
        while(fast->next && fast->next->next) {
            fast = fast->next->next;
            slow = slow->next;
        }
        
        ListNode *reverseHead = slow->next;
        slow->next = NULL;
        reverseHead = reverse(reverseHead);
        
        //merge two linked list
        ListNode* cur = head;
        while(reverseHead){
            ListNode* revTmp = reverseHead->next;
            reverseHead->next = cur->next;
            cur->next = reverseHead;
            cur = cur->next->next;
            reverseHead = revTmp;
        }
    }
    
    ListNode* reverse(ListNode* head) {
        if(!head || !head->next) return head;
        
        ListNode* pre = NULL;
        ListNode* cur = head;
        while(cur) {
            ListNode* tmp = cur->next;
            cur->next = pre;
            pre = cur;
            cur = tmp;
        }
        return pre;
    }
};
