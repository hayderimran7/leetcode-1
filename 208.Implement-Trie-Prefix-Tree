/*
Implement a trie with insert, search, and startsWith methods.

Example:

Trie trie = new Trie();

trie.insert("apple");
trie.search("apple");   // returns true
trie.search("app");     // returns false
trie.startsWith("app"); // returns true
trie.insert("app");   
trie.search("app");     // returns true
Note:

You may assume that all inputs are consist of lowercase letters a-z.
All inputs are guaranteed to be non-empty strings.
*/

class TrieNode {
public:
    #define CHAR_LEN 26
    // Initialize your data structure here.
    TrieNode() {
        end = false;
        for(int i = 0; i < CHAR_LEN; i++){
            next[i] = NULL;
        }
    }

public:
    bool end;
    TrieNode* next[CHAR_LEN];
};

class Trie {
public:
    Trie() {
        root = new TrieNode();
    }

    // Inserts a word into the trie.
    void insert(string s) {
        if(s.empty()) return;
        
        TrieNode* cur = root;
        for(int i = 0; i < s.length(); i++){
            int c = s[i] - 'a';
            if(!cur->next[c]){
                cur->next[c] = new TrieNode();
            }
            cur = cur->next[c];
        }
        cur->end = true;
    }

    // Returns if the word is in the trie.
    bool search(string key) {
        TrieNode* cur = root;
        int i = 0, n = key.length();
        while(i < n){
            int c = key[i]-'a';
            if(cur->next[c]) {
                cur = cur->next[c];
            }
            else 
                return false;
            i++;
        }
        return cur->end;
    }

    // Returns if there is any word in the trie
    // that starts with the given prefix.
    bool startsWith(string prefix) {
        TrieNode* cur = root;
        int i = 0, n = prefix.length();
        while(i < n){
            int c = prefix[i]-'a';
            if(cur->next[c]) {
                cur = cur->next[c];
            }
            else 
                return false;
            i++;
        }
        return true;
    }

private:
    TrieNode* root;
};

// Your Trie object will be instantiated and called as such:
// Trie trie;
// trie.insert("somestring");
// trie.search("key");
