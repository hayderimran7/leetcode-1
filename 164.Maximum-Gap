/*
Given an unsorted array, find the maximum difference between the successive elements in its sorted form.

Return 0 if the array contains less than 2 elements.

Example 1:

Input: [3,6,9,1]
Output: 3
Explanation: The sorted form of the array is [1,3,6,9], either
             (3,6) or (6,9) has the maximum difference 3.
Example 2:

Input: [10]
Output: 0
Explanation: The array contains less than 2 elements, therefore return 0.
Note:

You may assume all elements in the array are non-negative integers and fit in the 32-bit signed integer range.
Try to solve it in linear time/space.
*/


class Solution {
public:
    int maximumGap(vector<int>& nums) {
        int len = nums.size();
        if(len < 2) return 0;
        
        int minv = nums[0], maxv = nums[0];
        for(int i = 1; i < len; i++){
            if(nums[i] < minv) minv = nums[i];
            else if(nums[i] > maxv) maxv = nums[i];
        }
        
        int buck_size = max(1, (maxv-minv)/(len-1));
        int buck_num = (maxv-minv)/buck_size + 1;
        
        if(buck_num <= 1) return maxv-minv;
        
        vector<int> bucket_min(buck_num, INT_MAX);
        vector<int> bucket_max(buck_num, INT_MIN);
        
        for(int i = 0; i < len; i++){
            int buckid = (nums[i] - minv)/buck_size;
            bucket_min[buckid] = min(nums[i], bucket_min[buckid]);
            bucket_max[buckid] = max(nums[i], bucket_max[buckid]);
        }
        
        int maxgap = INT_MIN;
        int last_max = minv;
        for(int i = 0; i < buck_num; i++){
            if(bucket_min[i]==INT_MAX && bucket_max[i]==INT_MIN) continue;
            maxgap = max(maxgap, bucket_min[i]-last_max);
            last_max = bucket_max[i];
        }
        return maxgap;
    }
};
