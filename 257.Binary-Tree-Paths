/*
Given a binary tree, return all root-to-leaf paths.

Note: A leaf is a node with no children.

Example:

Input:

   1
 /   \
2     3
 \
  5

Output: ["1->2->5", "1->3"]

Explanation: All root-to-leaf paths are: 1->2->5, 1->3

*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<string> binaryTreePaths(TreeNode* root) {
        vector<string> rst;
        if(!root) return rst;
        
        dfs(root, "", rst);
    }
    
    void dfs(TreeNode* cur, std::string const& str, vector<string>& rst){
        if(!cur->left && !cur->right)
            return rst.push_back(str + to_string(cur->val));
        if(cur->left) dfs(cur->left, str + to_string(cur->val) + "->", rst);
        if(cur->right) dfs(cur->right, str + to_string(cur->val) + "->", rst);
    }
    
    std::string to_string(int val){
        ostringstream oss;
        oss << val;
        return oss.str();
    }
};
