/*
Given the root of a binary tree, each node in the tree has a distinct value.

After deleting all nodes with a value in to_delete, we are left with a forest (a disjoint union of trees).

Return the roots of the trees in the remaining forest.  You may return the result in any order.

 

Example 1:



Input: root = [1,2,3,4,5,6,7], to_delete = [3,5]
Output: [[1,2,null,4],[6],[7]]
 

Constraints:

The number of nodes in the given tree is at most 1000.
Each node has a distinct value between 1 and 1000.
to_delete.length <= 1000
to_delete contains distinct values between 1 and 1000.
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<TreeNode*> delNodes(TreeNode* root, vector<int>& to_delete) {
        vector<TreeNode*> res;
        unordered_set<int> deleted(to_delete.begin(), to_delete.end());
        helper(root, true, deleted, res);
        return res;
    }
    
    TreeNode* helper(TreeNode* root, bool is_root, unordered_set<int>& deleted, vector<TreeNode*>& res) {
        if(!root) return NULL;
        bool is_delete = deleted.count(root->val);
        if(is_root && !is_delete) res.push_back(root);
        // if parent node is deleted, this node will become root of a tree
        root->left = helper(root->left, is_delete, deleted, res);
        root->right = helper(root->right, is_delete, deleted, res);
        return is_delete ? NULL : root;
    }
};
