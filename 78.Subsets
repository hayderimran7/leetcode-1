/*
Given a set of distinct integers, nums, return all possible subsets (the power set).

Note: The solution set must not contain duplicate subsets.

Example:

Input: nums = [1,2,3]
Output:
[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]
*/

/*
difference to 77.Combinations is combinations get fix size vector,
subsets is variant size vector, we can use Combination code with a paramter len
    helper(int start, int len, vector<int>& nums, vector<int>& past, vector<vector<int> >& rst)
but this need a for loop for all the different length in main function
that's why below code "rst.push_back(past);" in helper without termination condition
*/

class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int> > rst;
        if(nums.empty())return rst;
        
        sort(nums.begin(), nums.end());

        vector<int> past;
        helper(0, nums, past, rst);
        
        return rst;
    }
    
    void helper(int start, vector<int>& nums, vector<int>& past, vector<vector<int> >& rst){
        rst.push_back(past);

        for(int i = start; i < nums.size(); i++){
            past.push_back(nums[i]);
            helper(i+1, nums, past, rst);
            past.pop_back();
        }
    }
};
