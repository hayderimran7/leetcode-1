/*
Two elements of a binary search tree (BST) are swapped by mistake.

Recover the tree without changing its structure.

Example 1:

Input: [1,3,null,null,2]

   1
  /
 3
  \
   2

Output: [3,1,null,null,2]

   3
  /
 1
  \
   2
Example 2:

Input: [3,1,4,null,null,2]

  3
 / \
1   4
   /
  2

Output: [2,1,4,null,null,3]

  2
 / \
1   4
   /
  3
Follow up:

A solution using O(n) space is pretty straight forward.
Could you devise a constant space solution?
*/

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode *first = NULL, *second = NULL, *pre = NULL;

    void recoverTree(TreeNode *root) {
        search(root);
        if(first && second) {
            swap(first->val, second->val);
        }
    }
    
    void search(TreeNode *root){
        if(!root) return;
        
        search(root->left);
        if(pre && root->val < pre->val) {
            if(!first) first = pre;
            // current root might be the second one, so here we can not use else
            second = root;
        }
        pre = root;
        search(root->right);
    }

};
