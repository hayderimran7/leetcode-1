/*
Given a non-empty array of integers, return the third maximum number in this array. If it does not exist, return the maximum number. The time complexity must be in O(n).

Example 1:

Input: [3, 2, 1]

Output: 1

Explanation: The third maximum is 1.

Example 2:

Input: [1, 2]

Output: 2

Explanation: The third maximum does not exist, so the maximum (2) is returned instead.

Example 3:

Input: [2, 2, 3, 1]

Output: 1

Explanation: Note that the third maximum here means the third maximum distinct number.
Both numbers with value 2 are both considered as second maximum.
*/

class Solution {
public:
    int thirdMax(vector<int>& nums) {
        int max1 = INT_MAX, max2=INT_MAX, max3=INT_MAX;
        for (auto n : nums) {
            if(n == max1 || n==max2 || n==max3) continue;
            if (max1 == INT_MAX || n > max1) {
                max3 = max2;
                max2 = max1;
                max1 = n;
            } else if (max2 == INT_MAX || n > max2) {
                max3 = max2;
                max2 = n;
            } else if (max3 == INT_MAX || n > max3) {
                max3 = n;
            }
        }
        return max3 == INT_MAX ? max1 : max3;
    }
};
