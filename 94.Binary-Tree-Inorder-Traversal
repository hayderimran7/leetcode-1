/*
Given a binary tree, return the inorder traversal of its nodes' values.

Example:

Input: [1,null,2,3]
   1
    \
     2
    /
   3

Output: [1,3,2]
Follow up: Recursive solution is trivial, could you do it iteratively?
*/

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> inorderTraversal(TreeNode *root) {
        vector<int> rst;
        TreeNode *p = root;
        stack<TreeNode*> nodes;
        
        while(p || !nodes.empty()){
            while(p){
                nodes.push(p);
                p = p->left;
            }
            
            p = nodes.top();
            nodes.pop();
            rst.push_back(p->val);
            p = p->right;
        }
        return rst;
    }
};
