/*
Given the root of a binary tree, the level of its root is 1, the level of its children is 2, and so on.

Return the smallest level X such that the sum of all the values of nodes at level X is maximal.

 

Example 1:



Input: [1,7,0,7,-8,null,null]
Output: 2
Explanation: 
Level 1 sum = 1.
Level 2 sum = 7 + 0 = 7.
Level 3 sum = 7 + -8 = -1.
So we return the level with the maximum sum which is level 2.
 

Note:

The number of nodes in the given tree is between 1 and 10^4.
-10^5 <= node.val <= 10^5
*/


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
    vector<int> sums;
    
public:
    int maxLevelSum(TreeNode* root) {
        int res = 0;
        dfs(root, 1);
        for(int i = 1;i < sums.size(); i++) {
            if(sums[i]>sums[res]) res = i;
        }
        return res+1;
    }
    
    void dfs(TreeNode* root, int level) {
        if(!root) return;
        if(level > sums.size()) sums.push_back(0);
        sums[level-1] += root->val;
        dfs(root->left, level+1);
        dfs(root->right, level+1);
    }
};
