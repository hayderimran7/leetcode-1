/*
Implement a basic calculator to evaluate a simple expression string.

The expression string may contain open ( and closing parentheses ), the plus + or minus sign -, non-negative integers and empty spaces .

Example 1:

Input: "1 + 1"
Output: 2

Example 2:

Input: " 2-1 + 2 "
Output: 3

Example 3:

Input: "(1+(4+5+2)-3)+(6+8)"
Output: 23

Note:

    You may assume that the given expression is always valid.
    Do not use the eval built-in library function.
*/

// calculate at the operator position using last flag and num
// push previous result and flag to stack when see '(', reset result and flag
// pop from stack when see ')'
// check if there's last num at the end

class Solution {
public:
    int calculate(string s) {
        stack<int> stk;
        int rst = 0;
        int num = 0;
        int flag = 1;
        for(int i = 0; i < s.length(); i++) {
            if(s[i] >= '0' && s[i] <= '9'){
                num = num*10 + s[i]-'0';
            }
            else if(s[i] == '+'){
                rst += flag*num;
                num = 0; flag = 1;
            }
            else if(s[i] == '-') {
                rst += flag*num;
                num = 0; flag = -1;
            }
            else if(s[i] == '(') {
                stk.push(rst);
                stk.push(flag);
                rst = 0; flag = 1;
            }
            else if(s[i] == ')') {
                rst += flag*num;
                num = 0;
                rst *= stk.top(); stk.pop();
                rst += stk.top(); stk.pop();
            }
        }
        
        if(num) rst += flag*num;
        return rst;
    }
};
