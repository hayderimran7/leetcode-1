/*
Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.

Example 1:

Input: "babad"
Output: "bab"
Note: "aba" is also a valid answer.
Example 2:

Input: "cbbd"
Output: "bb"
*/


//idea is use j----k to mark the start and end of a palindromic
// first grow k till not duplicate char, mark this will be next round start point
// then <--j  and k--> if [j] == [k], get length then compare to max length and record [start, end]
// start over from last marker

    string longestPalindrome(string s) {
        if(s.empty() || s.size()==1) return s;
        int n = s.size();
        int minst = 0, maxlen = 1;
        for(int i = 0; i < n; ){
            if (n - i <= maxlen/2) break;
            int j = i, k = i;
            while(k < n-1 && s[k] == s[k+1]) k++;
            i = k+1;
            while(k < n-1 && j > 0 && s[k+1] == s[j-1]) {k++; j--;}
            int len = k-j+1;
            if(len > maxlen) {
                minst = j;
                maxlen = len;
            }
        }
        return s.substr(minst, maxlen);
    }
