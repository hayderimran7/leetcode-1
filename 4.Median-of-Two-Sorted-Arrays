/*
There are two sorted arrays nums1 and nums2 of size m and n respectively.

Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).

You may assume nums1 and nums2 cannot be both empty.

Example 1:

nums1 = [1, 3]
nums2 = [2]

The median is 2.0
Example 2:

nums1 = [1, 2]
nums2 = [3, 4]

The median is (2 + 3)/2 = 2.5
*/

// idea is throw half away to make a log(m+n)
// quesion is which half
// like buy ads from Google/Facebook, half of money is wasted, quesion is which half :D


    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int n1 = nums1.size(), n2 = nums2.size();
        int count = n1+n2;
        
        if(count%2) {
            return helper(nums1, 0, n1, nums2, 0, n2, count/2+1);
        }
        else {
            return (helper(nums1, 0, n1, nums2, 0, n2, count/2+1) + helper(nums1, 0, n1, nums2, 0, n2, count/2))/2.0;
        }
    }
    
    int helper(vector<int>& nums1, int s1, int e1, vector<int>& nums2, int s2, int e2, int k){
        int m = e1-s1, n=e2-s2;
        if(m>n)  return helper(nums2, s2, e2, nums1, s1, e1, k);//shorter first
        if(m==0)  return nums2[s2+k-1];
        if(k==1)  return min(nums1[s1], nums2[s2]);

        int t1=min(k/2, m), t2=k-t1;
        if(nums1[s1+t1-1] < nums2[s2+t2-1])
            return helper(nums1, s1+t1, e1, nums2, s2, s2+t2, k-t1);
        else if(nums1[s1+t1-1] > nums2[s2+t2-1])
            return helper(nums1, s1, s1+t1, nums2, s2+t2, e2, k-t2);
        else
            return nums1[s1+t1-1];
    }

