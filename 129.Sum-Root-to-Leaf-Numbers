/*
Given a binary tree containing digits from 0-9 only, each root-to-leaf path could represent a number.

An example is the root-to-leaf path 1->2->3 which represents the number 123.

Find the total sum of all root-to-leaf numbers.

Note: A leaf is a node with no children.

Example:

Input: [1,2,3]
    1
   / \
  2   3
Output: 25
Explanation:
The root-to-leaf path 1->2 represents the number 12.
The root-to-leaf path 1->3 represents the number 13.
Therefore, sum = 12 + 13 = 25.
Example 2:

Input: [4,9,0,5,1]
    4
   / \
  9   0
 / \
5   1
Output: 1026
Explanation:
The root-to-leaf path 4->9->5 represents the number 495.
The root-to-leaf path 4->9->1 represents the number 491.
The root-to-leaf path 4->0 represents the number 40.
Therefore, sum = 495 + 491 + 40 = 1026.
*/

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

class Solution {
public:
    int sumNumbers(TreeNode* root) {
        return sum(root, 0);
    }
    
    int sum(TreeNode* root, int p) {
        if(!root) return 0;
        if(!root->left && !root->right) return p*10+root->val;
        return sum(root->left, p*10+root->val) + sum(root->right, p*10+root->val);
    }
};


// use vector to store each root-to-leaf value then sum

class Solution {
public:
    int sumNumbers(TreeNode *root) {
        if(!root) return 0;
        vector<int> rst;
        sum(root, 0, rst);
        int sum = 0;
        for(int i = 0; i < rst.size(); i++) sum += rst[i];
        return sum;
    }
    
    void sum(TreeNode *root, int parent, vector<int>& rst){
        if(!root->left && !root->right){
            rst.push_back(10*parent + root->val);
            return;
        }
        
        if(root->left) {
            sum(root->left, 10*parent+root->val, rst);
        }
        if(root->right) {
            sum(root->right, 10*parent+root->val, rst);
        }
    }
};


