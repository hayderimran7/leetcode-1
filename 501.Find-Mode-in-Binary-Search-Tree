/*
Given a binary search tree (BST) with duplicates, find all the mode(s) (the most frequently occurred element) in the given BST.

Assume a BST is defined as follows:

    The left subtree of a node contains only nodes with keys less than or equal to the node's key.
    The right subtree of a node contains only nodes with keys greater than or equal to the node's key.
    Both the left and right subtrees must also be binary search trees.

 

For example:
Given BST [1,null,2,2],

   1
    \
     2
    /
   2

 

return [2].

Note: If a tree has more than one mode, you can return them in any order.

Follow up: Could you do that without using any extra space? (Assume that the implicit stack space incurred due to recursion does not count).
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    unordered_map<int, int> vals;
    int maxv = 0;
    vector<int> findMode(TreeNode* root) {
        if(!root) return vector<int>(0);
        travel(root);
        
        vector<int> res;
        for(auto &ii : vals) {
            if(ii.second == maxv) {
                res.push_back(ii.first);
            }
        }
        return res;
    }
    
    void travel(TreeNode* root) {
        if(root->left) travel(root->left);
        if(vals.find(root->val) == vals.end()) {
            vals[root->val] = 1;
        } else {
            vals[root->val]++;
        }
        maxv = max(maxv, vals[root->val]);
        if(root->right) travel(root->right);
    }
        
};
