/*
Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.

Example 1:

Input:
[
 [ 1, 2, 3 ],
 [ 4, 5, 6 ],
 [ 7, 8, 9 ]
]
Output: [1,2,3,6,9,8,7,4,5]
Example 2:

Input:
[
  [1, 2, 3, 4],
  [5, 6, 7, 8],
  [9,10,11,12]
]
Output: [1,2,3,4,8,12,11,10,9,5,6,7]
*/

class Solution {
public:
    vector<int> spiralOrder(vector<vector<int> > &matrix) {
        vector<int> rst;
        
        int m = matrix.size();
        if(m<=0) return rst;
        
        int n = matrix[0].size();
        if(n<=0) return rst;
        
        int num = m*n;
        int i = 0, j = 0;
        int low = 0, ilen = m-1, jlen = n-1;
        
        for(int k = 0; k < num; k++){
            rst.push_back(matrix[i][j]);
            
            if(i==low && j < jlen)j++;
            else if(j==jlen && i < ilen)i++;
            else if(i==ilen && j > low)j--;
            else if(j==low && i > low)i--;
            
            if(i == low && j == low){
                low++; ilen--; jlen--;
                i++; j++;
            }
        }
        return rst;
    }
};
