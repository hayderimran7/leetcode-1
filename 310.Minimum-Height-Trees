/*
For an undirected graph with tree characteristics, we can choose any node as the root. The result graph is then a rooted tree. Among all possible rooted trees, those with minimum height are called minimum height trees (MHTs). Given such a graph, write a function to find all the MHTs and return a list of their root labels.

Format
The graph contains n nodes which are labeled from 0 to n - 1. You will be given the number n and a list of undirected edges (each edge is a pair of labels).

You can assume that no duplicate edges will appear in edges. Since all edges are undirected, [0, 1] is the same as [1, 0] and thus will not appear together in edges.

Example 1 :

Input: n = 4, edges = [[1, 0], [1, 2], [1, 3]]

        0
        |
        1
       / \
      2   3 

Output: [1]

Example 2 :

Input: n = 6, edges = [[0, 3], [1, 3], [2, 3], [4, 3], [5, 4]]

     0  1  2
      \ | /
        3
        |
        4
        |
        5 

Output: [3, 4]

Note:

    According to the definition of tree on Wikipedia: “a tree is an undirected graph in which any two vertices are connected by exactly one path. In other words, any connected graph without simple cycles is a tree.”
    The height of a rooted tree is the number of edges on the longest downward path between the root and a leaf.

*/


class Solution {
public:
    vector<int> findMinHeightTrees(int n, vector<pair<int, int>>& edges) {
        if(n==1)
            return vector<int>(1, 0);
        
        vector<unordered_set<int>> adj(n);
        for(int i = 0; i < edges.size(); i++){
            adj[edges[i].first].insert(edges[i].second);
            adj[edges[i].second].insert(edges[i].first);
        }
        
        vector<int> current;
        // Create first leaf layer
        for (int i = 0; i < adj.size(); ++i) {
            if (adj[i].size() == 1)
                current.push_back(i);
        }

        // BFS the graph
        while (true) {
            vector<int> next;
            for (int i = 0; i < current.size(); i++) {
                for (unordered_set<int>::iterator it = adj[current[i]].begin(); it != adj[current[i]].end(); ++it)
                {
                    adj[*it].erase(current[i]);
                    if (adj[*it].size() == 1) next.push_back(*it);
                }
            }
            if (next.empty()) return current;
            current = next;
        }
        return current;
    }
};
