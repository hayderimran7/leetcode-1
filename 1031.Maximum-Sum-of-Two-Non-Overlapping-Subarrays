/*
Given an array A of non-negative integers, return the maximum sum of elements in two non-overlapping (contiguous) subarrays, which have lengths L and M.  (For clarification, the L-length subarray could occur before or after the M-length subarray.)

Formally, return the largest V for which V = (A[i] + A[i+1] + ... + A[i+L-1]) + (A[j] + A[j+1] + ... + A[j+M-1]) and either:

0 <= i < i + L - 1 < j < j + M - 1 < A.length, or
0 <= j < j + M - 1 < i < i + L - 1 < A.length.
 

Example 1:

Input: A = [0,6,5,2,2,5,1,9,4], L = 1, M = 2
Output: 20
Explanation: One choice of subarrays is [9] with length 1, and [6,5] with length 2.
Example 2:

Input: A = [3,8,1,3,2,1,8,9,0], L = 3, M = 2
Output: 29
Explanation: One choice of subarrays is [3,8,1] with length 3, and [8,9] with length 2.
Example 3:

Input: A = [2,1,5,6,0,9,5,0,3,8], L = 4, M = 3
Output: 31
Explanation: One choice of subarrays is [5,6,0,9] with length 4, and [3,8] with length 3.
 

Note:

L >= 1
M >= 1
L + M <= A.length <= 1000
0 <= A[i] <= 1000
*/

class Solution {
public:
    int maxSumTwoNoOverlap(vector<int>& A, int L, int M) {
        // check A size with L, M
        if(A.empty() || A.size() < M || A.size() < L) return 0;
        vector<int> sum(A.size(), 0);
        // get prefix sum
        sum[0] = A[0];
        for(int i = 1; i < A.size(); i++) {
            sum[i] = sum[i-1]+A[i];
        }
        
        // start from a window size L+M, we can get at each i
        // left side L size subarray max, window start from [0, L-1]
        // left side M size subarray max, window start from [0, M-1]
        // when i move 1 step to right, L and M window move 1 step
        // this graph show L window before M window, vice versa
        // --- --
        //   L  M
        // ---- --
        //    L  M
        // for L size widow, Lamx is max(Lmax, window [i-M-L, i-M]), L window is [1, L], right side of L window is M window
        // for M size window, Mmax is max(Max, window [i-M-L, i-L])), M window is [1, M], right side of M window is L window
        // res will be the Lmax + M window, or Mmax + L window
        int res = sum[L+M-1], Lmax = sum[L-1], Mmax = sum[M-1];
        for(int i = L+M; i < A.size(); i++) {
            Lmax = max(Lmax, sum[i-M]-sum[i-L-M]);// L size window
            Mmax = max(Mmax, sum[i-L]-sum[i-L-M]);// M size window
            res = max(res, max(Lmax + sum[i]-sum[i-M], Mmax+sum[i]-sum[i-L]));
        }
        return res;
    }
};
