/*
Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.

Note:

All numbers will be positive integers.
The solution set must not contain duplicate combinations.
Example 1:

Input: k = 3, n = 7
Output: [[1,2,4]]
Example 2:

Input: k = 3, n = 9
Output: [[1,2,6], [1,3,5], [2,3,4]]
*/

class Solution {
public:
    vector<vector<int>> combinationSum3(int k, int n) {
        vector<vector<int>> rst;
        if(k > n) return rst;
        vector<int> cur;
        vector<int> numbers{1,2,3,4,5,6,7,8,9};
        sum(numbers, 0, k, n, cur, rst);
        
        return rst;
    }
    
    void sum(vector<int> const& numbers, int st, int k, int target, vector<int>& cur, vector<vector<int>>& rst){
        if(cur.size() == k && target == 0){
            rst.push_back(cur);
            return;
        }
        
        for(int i = st; i < 9; i++){
            if(numbers[i] > target) return;
            cur.push_back(numbers[i]);
            sum(numbers, i+1, k, target-numbers[i], cur, rst);
            cur.pop_back();
        }
    }
};
