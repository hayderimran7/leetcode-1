/*
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example:

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */

// idea is add a dummy head
// need check if there's a carry after complete while loop to add a new node

    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* p1 = l1, *p2 = l2;
        ListNode rh(0);
        ListNode* r = &rh;
        int c = 0, t = 0;
        while(p1 || p2){
            int t = c;
            if(p1) {
                t += p1->val;
                p1 = p1->next;
            }
            if(p2) {
                t +=p2->val;
                p2 = p2->next;
            }
            c = t/10;
            r->next = new ListNode(t%10);
            r = r->next;
        }
        if(c) r->next = new ListNode(c);
        return rh.next;
    }
