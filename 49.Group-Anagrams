/*
Given an array of strings, group anagrams together.

Example:

Input: ["eat", "tea", "tan", "ate", "nat", "bat"],
Output:
[
  ["ate","eat","tea"],
  ["nat","tan"],
  ["bat"]
]
Note:

All inputs will be in lowercase.
The order of your output does not matter.
*/

class Solution {
public:
    vector<string> anagrams(vector<string> &strs) {
        vector<string> rst;
        std::map<string, vector<string> > dupstrs;
        std::map<string, vector<string> >::iterator iter;
        for(int i = 0; i < strs.size(); i++){
            string tmp = strs[i];
            sort(tmp.begin(), tmp.end());
            iter = dupstrs.find(tmp);
            if(iter == dupstrs.end()){
                dupstrs[tmp].push_back(strs[i]);
            }else {
                iter->second.push_back(strs[i]);
            }
        }
        
        for(iter = dupstrs.begin(); iter != dupstrs.end(); ++iter) {
            if(iter->second.size()>1){
                rst.insert(rst.begin(), iter->second.begin(), iter->second.end());
            }
        }
        return rst;
    }
};
