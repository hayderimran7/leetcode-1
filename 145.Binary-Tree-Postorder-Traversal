/*
Given a binary tree, return the postorder traversal of its nodes' values.

Example:

Input: [1,null,2,3]
   1
    \
     2
    /
   3

Output: [3,2,1]
Follow up: Recursive solution is trivial, could you do it iteratively?
*/

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> postorderTraversal(TreeNode *root) {
        vector<int> rst;
        if(!root) return rst;
        
        stack<TreeNode *> s;
        stack<TreeNode *> out;
        s.push(root);
        while(!s.empty()){
            TreeNode *cur = s.top();
            s.pop();
            out.push(cur);
            
            if(cur->left) s.push(cur->left);
            if(cur->right) s.push(cur->right);
        }
        
        while(!out.empty()){
            rst.push_back(out.top()->val);
            out.pop();
        }
        return rst;
    }
};
