/*
Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its bottom-up level order traversal as:
[
  [15,7],
  [9,20],
  [3]
]
*/

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int> > levelOrderBottom(TreeNode *root) {
        vector<vector<int> > rst;
        if(!root) return rst;
        
        queue<TreeNode*> nodes;
        nodes.push(root);
        vector<int> level;
        
        while(!nodes.empty()){
            level.clear();
            int len = nodes.size();
            while(len){
                TreeNode *p = nodes.front();
                nodes.pop();
                level.push_back(p->val);
                if(p->left) nodes.push(p->left);
                if(p->right) nodes.push(p->right);
                --len;
            }
            rst.push_back(level);
        }
        
        reverse(rst.begin(), rst.end());
        return rst;
    }
};
