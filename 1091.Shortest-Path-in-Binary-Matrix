/*
In an N by N square grid, each cell is either empty (0) or blocked (1).

A clear path from top-left to bottom-right has length k if and only if it is composed of cells C_1, C_2, ..., C_k such that:

Adjacent cells C_i and C_{i+1} are connected 8-directionally (ie., they are different and share an edge or corner)
C_1 is at location (0, 0) (ie. has value grid[0][0])
C_k is at location (N-1, N-1) (ie. has value grid[N-1][N-1])
If C_i is located at (r, c), then grid[r][c] is empty (ie. grid[r][c] == 0).
Return the length of the shortest such clear path from top-left to bottom-right.  If such a path does not exist, return -1.

 

Example 1:

Input: [[0,1],[1,0]]


Output: 2

Example 2:

Input: [[0,0,0],[1,1,0],[1,1,0]]


Output: 4

 

Note:

1 <= grid.length == grid[0].length <= 100
grid[r][c] is 0 or 1
*/

// BFS

class Solution {
public:
    struct Position {
        int i;
        int j;
        int d;
    };
    
    vector<vector<int>> dirs = {{0,1},{0,-1},{1,0},{-1,0},{1,-1},{-1,1},{-1,-1},{1,1}};
    
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        int N = grid.size();
        if(grid[0][0]==1 || grid[N-1][N-1]==1) return -1;
        
        queue<Position> que;
        que.push(Position{0, 0, 1});
        while(!que.empty()) {
            int len = que.size();
            for(int l = 0; l < len; l++) {
                Position p = que.front();
                que.pop();
                
                if(p.i == N-1 && p.j == N-1) return p.d;
                // 8 direction
                for(int k = 0; k < 8; k++) {
                    
                    int x = p.i+dirs[k][0];
                    int y = p.j+dirs[k][1];
                    
                    if(x>=0 && x < N && y >=0 && y < N && grid[x][y] == 0) {
                        grid[x][y] = 1;
                        que.push(Position{x, y, p.d+1});
                    }
                }
            }
        }
        return -1;
    }
};
