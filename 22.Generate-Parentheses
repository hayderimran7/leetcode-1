/*
Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

For example, given n = 3, a solution set is:

[
  "((()))",
  "(()())",
  "(())()",
  "()(())",
  "()()()"
]

*/

vector<string> generateParenthesis(int n) {
        vector<string> rst;
        if(n<=0) return rst;
        string s = "";
        helper(s, n, n, rst);
        return rst;
    }
    
    void helper(string& path, int l, int r, vector<string>& rst){
        
        if(l == 0 && r == 0){
            rst.push_back(path);
            return;
        }
        
        if(l>0) {
            string tmp = path + "(";
            cout << "l:" << l << ", r:" << r << ", tmp:" << tmp << endl;
            helper(tmp, l-1, r, rst);
        }
        
        if(r>l) {
            string tmp = path+")";
            cout << "l:" << l << ", r:" << r << ", tmp:" << tmp << endl;
            helper(tmp, l, r-1, rst);
        }
    }

/*
use n=2 for example

l:2, r:2, tmp:(
l:1, r:2, tmp:((
l:0, r:2, tmp:(()
l:0, r:1, tmp:(())
l:1, r:2, tmp:()
l:1, r:1, tmp:()(
l:0, r:1, tmp:()()
*/
