/*
Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.

For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.

Example:

Given the sorted linked list: [-10,-3,0,5,9],

One possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:

      0
     / \
   -3   9
   /   /
 -10  5
*/

// idea is get the length of link list then cut from middle to form left and right subtree

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* cur;
    TreeNode* sortedListToBST(ListNode* head) {
        if(!head) return NULL;
        ListNode* p = head;
        int n = 0;
        while(p){
            p = p->next;
            n++;
        }
        cur = head;
        return build(0, n-1);
    }
    
    TreeNode* build(int l, int r){
        if(l > r) return NULL;
        int m = (l+r)/2;
        TreeNode* left = build(l, m-1);
        TreeNode* root = new TreeNode(cur->val);
        root->left = left;
        cur = cur->next;
        root->right = build(m+1, r);
        return root;
    }
};
