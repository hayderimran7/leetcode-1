/*
Given an array of integers A, find the sum of min(B), where B ranges over every (contiguous) subarray of A.

Since the answer may be large, return the answer modulo 10^9 + 7.

 

Example 1:

Input: [3,1,2,4]
Output: 17
Explanation: Subarrays are [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2], [1,2,4], [3,1,2,4]. 
Minimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1.  Sum is 17.
 

Note:

1 <= A.length <= 30000
1 <= A[i] <= 30000
*/

class Solution {
public:
    int sumSubarrayMins(vector<int>& A) {
        stack<int> preless, nextless;
        vector<int> left(A.size()), right(A.size());
        for(int i = 0; i < A.size(); i++) left[i] =  i + 1;
        for(int i = 0; i < A.size(); i++) right[i] = A.size() - i;

        for(int i = 0; i < A.size(); i++) {
            while(!preless.empty() && A[preless.top()] > A[i]) preless.pop();
            left[i] = preless.empty() ? i+1: i-preless.top();
            preless.push(i);

            while(!nextless.empty() && A[nextless.top()] > A[i]) {
                int x = nextless.top(); nextless.pop();
                right[x] = i-x;
            }
            nextless.push(i);
        }
        int res = 0, mod = 1e9 +7;
        for(int i = 0; i < A.size(); i++){
            res = (res + A[i]*left[i]*right[i])%mod;
        }
        return res;
    }
};
