/*
You are given a binary tree in which each node contains an integer value.

Find the number of paths that sum to a given value.

The path does not need to start or end at the root or a leaf, but it must go downwards (traveling only from parent nodes to child nodes).

The tree has no more than 1,000 nodes and the values are in the range -1,000,000 to 1,000,000.

Example:

root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8

      10
     /  \
    5   -3
   / \    \
  3   2   11
 / \   \
3  -2   1

Return 3. The paths that sum to 8 are:

1.  5 -> 3
2.  5 -> 2 -> 1
3. -3 -> 11
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int pathSum(TreeNode* root, int sum) {
        unordered_map<int, int> preSum;
        preSum.insert({0,1});
        return helper(root, 0, sum, preSum);
    }
    
    int helper(TreeNode* root, int currSum, int target, unordered_map<int, int>& preSum) {
        if (!root) return 0;
        
        currSum += root->val;
        int res = 0;
        if(preSum.count(currSum - target)) {
            res += preSum[currSum - target];
        }
        preSum[currSum]++;
        
        res += helper(root->left, currSum, target, preSum) + helper(root->right, currSum, target, preSum);
        preSum[currSum]--;
        return res;
    }
};


class Solution {
public:
    int pathSum(TreeNode* root, int sum) {
        if (!root) return 0;
        return pathSumFrom(root, sum) + pathSum(root->left, sum) + pathSum(root->right, sum);
    }
    
    int pathSumFrom(TreeNode* root, int sum) {
        if (!root) return 0;
        return (root->val == sum ? 1 : 0) 
            + pathSumFrom(root->left, sum - root->val) + pathSumFrom(root->right, sum - root->val);
    }
};
