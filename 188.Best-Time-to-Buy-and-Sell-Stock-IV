/*
Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete at most k transactions.

Note:
You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).

Example 1:

Input: [2,4,1], k = 2
Output: 2
Explanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.
Example 2:

Input: [3,2,6,5,0,3], k = 2
Output: 7
Explanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4.
             Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
*/


/*
DP: dp(i,j) is the max profit for up to i transactions by day j (0<=i<=k, 0<=j<n)
   dp[i][j] = max(dp[i][j-1], //don't trade on day j
                  dp[i-1][m]+ max(prices[j]-prices[m])) //trade on day j, m = {0,j-1}
we can change this formula
   dp[i-1][m]+ max(prices[j]-prices[m])
to
   prices[j] + max(dp[i-1][m]-prices[m])
use localmax for max(dp[i-1][m]-prices[m]), so we calculate before next j as
   localmax = max(localmax, dp[i-1][j]-prices[j]);
for example:
   dp[1][1] = max(dp[1][0], prices[1] + dp[0][0] - prices[0]
   dp[1][2] = max(dp[1][1], prices[2] + max(dp[0][0]-prices[0], dp[0][1]-prices[1]))
*/

class Solution {
public:
    int maxProfit(int k, vector<int>& prices) {
        int n = prices.size();
        if(n <= 1) return 0;
        
        if(k >= n/2) {
            int profit = 0;
            for(int i = 1; i < n; i++){
                if(prices[i] > prices[i-1]) profit += prices[i] - prices[i-1];
            }
            return profit;
        }
        
        vector<vector<int> > dp(k+1, vector<int>(n, 0));
        for(int i = 1; i <= k; i++) {
            int localmax = dp[i-1][0] - prices[0];
            for(int j = 1; j < n; j++) {
                dp[i][j] = max(dp[i][j-1], prices[j] + localmax);
                localmax = max(localmax, dp[i-1][j]-prices[j]);
            }
        }
        return dp[k][n-1];
    }
};
