/*
Given a string containing only digits, restore it by returning all possible valid IP address combinations.

Example:

Input: "25525511135"
Output: ["255.255.11.135", "255.255.111.35"]
*/

class Solution {
public:
    vector<string> restoreIpAddresses(string s) {
        vector<string> rst;
        if(s.size() < 4) return rst;
        string path = "";
        helper(s, 0, 0, path, rst);
        return rst;
    }
    
    void helper(string& s, int start, int count, string path, vector<string>& rst){
        if(count > 3)return;
        if(count == 3 && isvalid(s.substr(start))){
            path.append(s.substr(start));
            rst.push_back(path);
            return;
        }

        for(int i = start; i < s.size() && (i-start)<3; i++){
            string cur = s.substr(start, i-start+1);
            if(isvalid(cur)){
                helper(s, i+1, count+1, path + cur + ".", rst);
            }
        }
    }

    bool isvalid(std::string const& s){
        if(s.empty() || s.size()>3 || (s.size()>1 && s[0]=='0')) return false;
        
        int sum=0;  
        for(int i=0;i<s.size();i++){  
            sum*=10;  
            sum+=s[i]-'0';  
        }  
        return sum>=0&&sum<=255; 
    }
};
