/*
Given a binary array, find the maximum length of a contiguous subarray with equal number of 0 and 1.

Example 1:

Input: [0,1]
Output: 2
Explanation: [0, 1] is the longest contiguous subarray with equal number of 0 and 1.

Example 2:

Input: [0,1,0]
Output: 2
Explanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1.

Note: The length of the given binary array will not exceed 50,000. 
*/


// replace 0 with -1, then we will find longest subarray with sum = 0

class Solution {
public:
    int findMaxLength(vector<int>& nums) {
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] == 0) nums[i] = -1;
        }
        
        unordered_map<int, int> sumToIndex;
        // this is for subarray index start from 0, which sum = 0
        sumToIndex[0] = -1;
        int sum = 0, max = 0;
        
        for (int i = 0; i < nums.size(); i++) {
            sum += nums[i];
            if (sumToIndex.count(sum)) {
                max = std::max(max, i - sumToIndex[sum]);
            }
            else {
                sumToIndex[sum] = i;
            }
        }
        
        return max;
    }
};
